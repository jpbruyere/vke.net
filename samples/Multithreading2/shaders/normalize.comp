#version 450

#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) buffer buffIn {
    vec4 dataIn[];
};
 
layout(binding = 1) buffer buffOut {
    vec4 dataOut[];
};

layout(set = 1, binding = 0) buffer VBO {
    vec2 vertices[];
};
 
layout(set = 1, binding = 1) buffer IBO {
    uint indices[];
};

layout(push_constant) uniform PushConsts {
    int iStepSize;
    int imgDim;
    int pointCount;
};

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

vec4 getPixel (ivec2 uv) {
    return dataIn[uv.y * imgDim + uv.x];
}
void setPixel (ivec2 uv, vec4 pix) {
    dataOut[uv.y * imgDim + uv.x] = pix;
}

const vec4[] colors = vec4[](
    vec4(1,0,0,1),
    vec4(0,1,0,1),
    vec4(0,0,1,1),
    vec4(1,0,1,1),
    vec4(0,1,1,1),
    vec4(1,1,0,1),
    vec4(0.5,0,0,1),
    vec4(0,0.5,0,1),
    vec4(0,0,0.5,1),
    vec4(0.5,0,0.5,1),
    vec4(0,0.5,0.5,1),
    vec4(0.5,0.5,0,1),
    vec4(0,0.5,0.5,1),
    vec4(0.1,0.9,0.2,1),
    vec4(0.3,0.7,0.4,1),
    vec4(0.5,0.5,0.6,1),
    vec4(0.7,0.3,0.8,1),
    vec4(0.9,0.1,0.0,1)
    );

void main()
{
    ivec2 uv = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);    
    vec4 d = getPixel (uv);
    
    if (d.r > 0.0) {
        if (int(d.g) == uv.x && int(d.b) == uv.y)
            d.a = 1.0;
        else
            d.a = 0.4;
        
        d.rgb = colors [int(d.r)].rgb;
    }
    
    setPixel (uv, d);
}

