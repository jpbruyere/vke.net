#version 450

#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) buffer buffIn {
    vec4 dataIn[];
};
 
layout(binding = 1) buffer buffOut {
    vec4 dataOut[];
};

layout(push_constant) uniform PushConsts {
    int iStepSize;
    int imgDim;
};

const ivec2 dirs[] = ivec2[8] (
    ivec2( 1, 0),
    ivec2( 1, 1),
    ivec2( 0, 1),
    ivec2(-1, 1),
    ivec2(-1, 0),
    ivec2(-1,-1),
    ivec2( 0,-1),
    ivec2( 1,-1)
);

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;


vec4 getPixel (ivec2 uv) {
    return dataIn[uv.y * imgDim + uv.x];
}
void setPixel (ivec2 uv, vec4 pix) {
    dataOut[uv.y * imgDim + uv.x] = pix;
}

void main()
{
    ivec2 uv = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);    
    vec4 d = getPixel (uv);
    
    ivec2 thisSeedPos;                      
    if (d.r > 0.0)
        thisSeedPos = ivec2(int(d.g), int(d.b));
    else//no seed in current pixel
        thisSeedPos = ivec2(-1);        
    
    for (int j=0; j<8; j++){
        ivec2 otherUV = uv + iStepSize * dirs[j];
        if (otherUV.x < 0 || otherUV.y < 0 || otherUV.x >= imgDim || otherUV.y >= imgDim)
            continue;
            
        vec4 other = getPixel (otherUV);        
        
        if (other.r > 0.0) {//seed in other
            ivec2 otherSeedPos = ivec2(int(other.g), int(other.b));
            if (thisSeedPos.x < 0) {//replace current
                d = other;
                thisSeedPos = otherSeedPos;
            }else if (distance (uv, thisSeedPos) > distance (uv, otherSeedPos)) {
                d = other;
                thisSeedPos = otherSeedPos;
            }        
        }
    }
        
    setPixel (uv, d);
}
