#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_shader_16bit_storage : require

layout(binding = 0) buffer readonly path {
    vec2 pointsIn[];
};
 
layout(binding = 1) buffer writeonly vertices {
    vec2 vbo[];
};
layout(binding = 2) buffer writeonly indices {
    uint16_t ibo[];
};

layout(push_constant) uniform PushConsts {
    float halfWidth;
};


layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;


void main()
{

    if (gl_GlobalInvocationID.x > 0) {
        vec2 p0 = pointsIn[gl_GlobalInvocationID.x - 1];
        vec2 p1 = pointsIn[gl_GlobalInvocationID.x];
        vec2 n = normalize(p1 - p0);
        vec2 v = halfWidth * vec2(-n.y, n.x);
        
        uint pV = (gl_GlobalInvocationID.x - 1) * 4;
        uint pI = (gl_GlobalInvocationID.x - 1) * 6;
        
        vbo[pV] = p0 + v;
        vbo[pV+1] = p0 - v;
        vbo[pV+2] = p1 + v;
        vbo[pV+3] = p1 - v;

        ibo[pI] = uint16_t(pV);
        ibo[pI+1] = uint16_t(pV+2);
        ibo[pI+2] = uint16_t(pV+1);
        ibo[pI+3] = uint16_t(pV+2);
        ibo[pI+4] = uint16_t(pV+3);
        ibo[pI+5] = uint16_t(pV+1);
    }

}
